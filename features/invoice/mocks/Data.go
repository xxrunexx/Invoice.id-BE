// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	invoice "invoice-api/features/invoice"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CreateInvoice provides a mock function with given fields: data
func (_m *Data) CreateInvoice(data invoice.InvoiceCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(invoice.InvoiceCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoice provides a mock function with given fields: id
func (_m *Data) DeleteInvoice(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllInvoice provides a mock function with given fields: _a0
func (_m *Data) GetAllInvoice(_a0 invoice.InvoiceCore) ([]invoice.InvoiceCore, error) {
	ret := _m.Called(_a0)

	var r0 []invoice.InvoiceCore
	if rf, ok := ret.Get(0).(func(invoice.InvoiceCore) []invoice.InvoiceCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoice.InvoiceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(invoice.InvoiceCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceById provides a mock function with given fields: id
func (_m *Data) GetInvoiceById(id int) (invoice.InvoiceCore, error) {
	ret := _m.Called(id)

	var r0 invoice.InvoiceCore
	if rf, ok := ret.Get(0).(func(int) invoice.InvoiceCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(invoice.InvoiceCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceByStatus provides a mock function with given fields: status
func (_m *Data) GetInvoiceByStatus(status string) ([]invoice.InvoiceCore, error) {
	ret := _m.Called(status)

	var r0 []invoice.InvoiceCore
	if rf, ok := ret.Get(0).(func(string) []invoice.InvoiceCore); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoice.InvoiceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoice provides a mock function with given fields: data
func (_m *Data) UpdateInvoice(data invoice.InvoiceCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(invoice.InvoiceCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	client "invoice-api/features/client"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: data
func (_m *Data) CreateClient(data client.ClientCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.ClientCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClient provides a mock function with given fields: _a0
func (_m *Data) GetAllClient(_a0 client.ClientCore) ([]client.ClientCore, error) {
	ret := _m.Called(_a0)

	var r0 []client.ClientCore
	if rf, ok := ret.Get(0).(func(client.ClientCore) []client.ClientCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ClientCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.ClientCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientById provides a mock function with given fields: id
func (_m *Data) GetClientById(id int) (client.ClientCore, error) {
	ret := _m.Called(id)

	var r0 client.ClientCore
	if rf, ok := ret.Get(0).(func(int) client.ClientCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(client.ClientCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByNik provides a mock function with given fields: nik
func (_m *Data) GetClientByNik(nik int) (bool, error) {
	ret := _m.Called(nik)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(nik)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClient provides a mock function with given fields: data
func (_m *Data) UpdateClient(data client.ClientCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.ClientCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
